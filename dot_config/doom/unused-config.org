#+title: Unused Config

* Font Settings

#+begin_src emacs-lisp
  ;; Other font settings
  ;; '(org-block :inherit fixed-pitch)
  ;; '(org-code :inherit (shadow fixed-pitch))
  '(org-hide :inherit fixed-pitch :weight bold :height 1.3)
  ;; '(org-checkbox :inherit fixed-pitch)
  ;; '(org-document-info-keyword :inherit (shadow fixed-pitch))
  '(org-indent :inherit (org-hide fixed-pitch) :weight bold :height 1.3)
  ;; '(org-meta-line :inherit (font-lock-comment-face fixed-pitch))
  ;; '(org-property-value :inherit fixed-pitch)
  ;; '(org-special-keyword :inherit (font-lock-comment-face fixed-pitch))
  ;; '(org-table :inherit fixed-pitch)
  ;; '(org-tag :inherit (shadow fixed-pitch) :weight bold :height 0.8)
  ;; '(org-verbatim :inherit (shadow fixed-pitch))
#+end_src

* My Attempt At Rougier's Org-Outer-Indent / Brongulus's Version Of It. Never Worked. üò≠

#+begin_src emacs-lisp
(use-package! org
  :ensure nil
  :hook ((org-mode . visual-line-mode)
         (org-mode . my/org-mono-setup))
  :preface
  ;; (defun my/org-mono-reset ()
  ;;   (when (bound-and-true-p my/org-font-remap)
  ;;     (mapc #'face-remap-remove-relative my/org-font-remap)))
  (defun my/org-mono-setup ()
    (variable-pitch-mode -1)  ;; stay monospace in Org
    ;; (setq-local my/org-font-remap
    ;;             (list
    ;;              (face-remap-add-relative 'default '(:family "iA Writer Mono S"))
    ;;              (face-remap-add-relative 'fixed-pitch '(:family "iA Writer Mono S"))
    ;;              (face-remap-add-relative 'org-indent '(:inherit default) :height 1.3)
    ;;              (face-remap-add-relative 'org-hide '(:inherit default) :height 1.3)))
  ;; (add-hook 'kill-buffer-hook #'my/org-mono-reset nil t)
    )
  :config
  (setq org-directory "~/Sync/roam"
        ;; org-use-sub-superscripts '{}
        ;; org-export-with-sub-superscripts nil
        org-ellipsis " >"
        org-pretty-entities t
        org-startup-indented t
        org-startup-truncated nil
        org-adapt-indentation t
        org-special-ctrl-a/e nil
        org-M-RET-may-split-line '((item . nil))
        org-fold-catch-invisible-edits 'show-and-error
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t
        org-fontify-quote-and-verse-blocks t
        org-fontify-done-headline nil
        org-fontify-whole-heading-line t
        org-src-fontify-natively t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-blank-before-new-entry '((heading . t) (plain-list-item . nil))
        )

;; 1 Define per-level star faces = (org-level-N + default)
(defun my/org--define-star-faces ()
  (dotimes (i org-n-level-faces)
    (let* ((n (1+ i))
           (fname (intern (format "my/org-star-%d" n)))
           (hface (intern (format "org-level-%d" n))))
      (make-face fname)
      ;; Heading styling + monospace family from `default`
      (set-face-attribute fname nil :inherit (list hface 'default)))))

;; 2 Font-lock: paint *all* leading stars with the per-level face
(defun my/org--fontify-stars ()
  (font-lock-add-keywords
   nil
   `(( "^\\(\\*+\\)\\s-+"
       (1 (let* ((lvl (length (match-string 1)))
                 (face (intern (format "my/org-star-%d"
                                       (min lvl org-n-level-faces)))))
            face)
          prepend))) ; don‚Äôt clobber other faces
   'append)
  (font-lock-flush))

(add-hook 'org-mode-hook #'my/org--define-star-faces)
(add-hook 'org-mode-hook #'my/org--fontify-stars)

  ;; ;; Taken from rougier: org-outer-indent
  (defun org-outer-indent--compute-prefixes ()
    "Compute prefix strings for regular text and headlines."
    (setq org-indent--heading-line-prefixes
          (make-vector org-indent--deepest-level nil))
    (setq org-indent--inlinetask-line-prefixes
          (make-vector org-indent--deepest-level nil))
    (setq org-indent--text-line-prefixes
          (make-vector org-indent--deepest-level nil))
    ;; Find the lowest headline level (FIXME)
    (let* (;; (headline-levels (or (org-element-map
           ;;                          (org-element-parse-buffer) 'headline
           ;;                        #'(lambda (item)
           ;;                            (org-element-property :level item)))
           ;;                      '()))
           ;; (max-level (seq-max (if headline-levels
           ;;                         headline-levels
           ;;                       '(0))))
           (line-indentation (+ 3 4))
           (headline-indentation))
      (dotimes (level org-indent--deepest-level)
        (setq headline-indentation
              (max 0 (- line-indentation (+ 1 level))))
        (aset org-indent--inlinetask-line-prefixes level
              (make-string line-indentation ?\s))
        (aset org-indent--text-line-prefixes level
              (make-string line-indentation ?\s))
        (aset org-indent--heading-line-prefixes level
              (make-string headline-indentation ?\s))))
    (setq-local org-hide-leading-stars nil))

  (advice-add 'org-indent--compute-prefixes :override
              #'org-outer-indent--compute-prefixes)

  )

(use-package! org-agenda
  :ensure nil
  :config
  (setq org-agenda-files (list org-directory)
        ;; org-agenda-ignore-properties '(effort appt stats category)
        org-agenda-dim-blocked-tasks nil
        org-agenda-use-tag-inheritance nil
        org-agenda-inhibit-startup t
        org-agenda-window-setup 'current-window
        org-agenda-restore-windows-after-quit t
        org-agenda-start-with-log-mode t
        org-agenda-show-all-dates nil
        org-log-done 'time
        org-log-into-drawer t
        org-agenda-include-deadlines t)

  (defun elegant-agenda--title nil ;; src: elegant-agenda-mode
    (when-let* ((title (when (and org-agenda-redo-command
                                  (stringp (cadr org-agenda-redo-command)))
                         (format "‚îÄ  %s "
                                 (mapconcat
                                  #'identity
                                  (split-string-and-unquote
                                   (cadr org-agenda-redo-command) "")
                                  ""))))
                (width (window-width)))
      (face-remap-set-base 'header-line :height 1.4)
      (setq-local header-line-format
                  (format "%s %s" title (make-string (- width (length title)) ?‚îÄ t)))))

  (add-hook 'org-agenda-finalize-hook #'elegant-agenda--title)

  (setq org-agenda-breadcrumbs-separator " ‚ù± "
        org-agenda-todo-keyword-format "%-1s"
        org-agenda-use-time-grid t
        org-agenda-skip-timestamp-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-scheduled-leaders '("" "")
        org-agenda-deadline-leaders '("" "")
        org-agenda-todo-keyword-format ""
        org-agenda-block-separator (string-to-char " ")
        org-agenda-current-time-string "‚Üê now ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        org-agenda-time-grid
        '((daily today require-timed remove-matched)
          (800 1200 1600 2000)
          "       " "‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ")
        org-agenda-prefix-format
        '((agenda . " %i %-12b%t%s")
          (todo . " %i %?-12b"))
        org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w)" "PROJ(p)" "SOMEDAY(s)" "BACKLOG(b)" "SCRIPTING(s)" "|" "DONE(d)" "CANCELED(c)"))
        ))

(use-package! org-capture
  :ensure nil
  ;; :hook (org-capture-mode . meow-insert)
  :config
  (add-hook 'org-capture-mode-hook
            (lambda nil
              (setq-local header-line-format nil)))
  (setq org-capture-templates
        '(("t" "Todo" entry (file "~/Sync/roam/agenda/inbox.org")
           "* TODO %?")
          ("T" "Todo (clipboard)" entry (file "~/Sync/roam/agenda/inbox.org")
           "* TODO %? (notes)\n%x")
          ("d" "Todo (document)" entry (file "~/Sync/roam/agenda/inbox.org")
           "* TODO %? (notes)\n%a")
          ("i" "Todo (interactive)" entry (file "~/Sync/roam/agenda/inbox.org")
           "* TODO %? (notes)\n%^C")
          )))
#+end_src

** Org-Outer-Indent

#+begin_src emacs-lisp
;; (use-package! org-outer-indent
;;   :after org
;;   :hook (org-mode . org-outer-indent-mode)
;;   )

;; (add-hook 'org-mode-hook (lambda () (setq-local org-hide-leading-stars nil)))
#+end_src
